AWSTemplateFormatVersion: '2010-09-09'
Description: EKS Cluster and Node Group for ecommerce app (public subnets).

Parameters:
  VpcId:
    Description: VPC ID from networking stack
    Type: String
  PublicSubnet1:
    Description: Public subnet 1 ID
    Type: String
  PublicSubnet2:
    Description: Public subnet 2 ID
    Type: String

Resources:
  EKSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS cluster
      VpcId: !Ref VpcId

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: ecommerce-eks
      RoleArn: !GetAtt EKSRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds: [!Ref ClusterSecurityGroup]
        SubnetIds: [!Ref PublicSubnet1, !Ref PublicSubnet2]

  NodeGroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: ecommerce-nodegroup
      NodeRole: !GetAtt NodeGroupRole.Arn
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      ScalingConfig:
        MinSize: 2
        MaxSize: 4
        DesiredSize: 2
      InstanceTypes:
        - t3.medium
      DiskSize: 20
